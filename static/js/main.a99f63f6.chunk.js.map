{"version":3,"sources":["components/SendIcon.tsx","state.tsx","components/Chat.tsx","states/Login.ts","states/Home.ts","routes/Home.tsx","routes/Maps.tsx","states/List.ts","routes/List.tsx","Routes.tsx","routes/About.tsx","components/Login.tsx","states/index.ts","App.tsx","serviceWorker.ts","index.tsx","states/Chat.ts"],"names":["Svg","viewBox","width","height","fill","d","component","Context","createContext","models","Map","getProvider","update","flag","value","getModel","model","get","forEach","it","i","proto","Object","getPrototypeOf","modelClass","constructor","getOwnPropertyNames","name","f","result","createDraft","args","apply","e","finishDraft","set","Provider","children","useState","assign","useModel","useContext","Model","immerable","Chat","ref","useRef","store","ChatModel","login","LoginModel","visible","_setVisible","setVisible","clearState","process","nextTick","current","scrollTop","scrollHeight","setDom","className","count","hasNew","dot","style","fontSize","type","theme","onClick","onClose","messages","map","key","time","right","undefined","shape","size","src","message","datetime","locale","token","banned","Search","placeholder","disabled","enterButton","onSearch","chat","onChange","setValue","confirm","Login","socket","s","WebSocket","whiteList","needWhiteList","loginLoading","step","cacheToken","loading","loading2","this","send","data","error","localStorage","removeItem","setItem","validateFields","setLoginLoading","then","JSON","stringify","setStep","catch","console","finally","checkToken","title","content","okType","onOk","success","Home","players","tps","json","text","setText","useEffect","fetch","HomeModel","id","gutter","span","sm","hoverable","prefix","Title","copyable","level","length","precision","itemLayout","dataSource","renderItem","item","Item","Meta","avatar","fishing","description","health","food","source","Maps","setLoading","spinning","onLoad","frameBorder","List","banList","readyState","CONNECTING","addEventListener","removeEventListener","p","loginTimeText","moment","loginTime","format","registerTimeText","registerTime","values","ban","reason","from","to","log","columns","dataIndex","render","op","color","sorter","a","b","routes","path","icon","ListModel","getList","rowKey","scroll","x","pagination","setData","overflowY","padding","routeMapped","Routes","routeMenus","Menus","pathname","useReactRouter","location","mode","selectedKeys","Step","useForm","getFieldDecorator","closeModel","overlay","Divider","quit","placement","defaultVisible","onCancel","footer","bodyStyle","textAlign","marginBottom","onSubmit","preventDefault","md","hasFeedback","rules","required","Option","min","max","htmlType","extra","tip","status","homeModel","chatModel","loginModel","listModel","mapping","setStatus","receive","loginReceive","tokenReceive","playerJoin","playerQuit","list","listReceive","quitReceive","dialog","kind","close","onmessage","parse","onopen","getItem","onclose","setTimeout","Header","Sider","Content","App","window","innerWidth","collapsed","updateCollapsed","drawer","updateDrawer","display","trigger","collapsible","breakpoint","onBreakpoint","collapsedWidth","closable","background","position","zIndex","minHeight","marginTop","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","dom","document","getElementById","ReactDOM","zhCN","URL","href","origin","response","contentType","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","innerHTML","clientHeight","target","push","Date","now"],"mappings":"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","file":"static/js/main.a99f63f6.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Icon } from 'antd'\r\n\r\n// tslint:disable:max-line-length\r\nconst Svg = () => (\r\n  <svg viewBox='0 0 1025 1024' width='1em' height='1em' fill='currentColor'>\r\n    <path d='M971.388 23.76L28.098 518.406c-38.803 20.337-37.211 50.146 3.502 66.264l120.429 47.598c40.633 16.079 102.24 7.363 136.785-19.66l523.024-412.426c34.386-27.102 38.087-23.082 8.198 8.915l-413.5 442.672c-29.968 31.878-21.053 70.96 19.7 86.84l14.089 5.531c40.753 15.76 107.374 42.266 147.929 58.821l133.561 54.364c40.594 16.517 73.786 30.207 73.786 30.446 0 .239.238.995.437 1.035.2.08 9.79-34.386 21.252-76.651l203.686-748.48c11.462-42.305-10.785-60.214-49.588-39.917zM410.874 788.794l-92.41-37.808c-40.515-16.595-59.936 2.866-43.141 43.34.04 0 85.804 206.71 83.416 213.994-2.467 7.243 82.302-122.658 82.302-122.658C465 848.97 451.39 805.39 410.874 788.794z' />\r\n  </svg>\r\n)\r\n\r\nexport default () => <Icon component={Svg} />\r\n","import { createDraft, finishDraft, immerable } from 'immer'\r\nimport React, { createContext, useState, useContext } from 'react'\r\n\r\nexport const Context = createContext({ models: new Map<typeof Model, Model>() })\r\n\r\nexport const getProvider = (...models: Model[]) => {\r\n  let update: (data: boolean) => void = () => {}\r\n  let flag = false\r\n  let value = { models: new Map<typeof Model, Model>() }\r\n  const getModel = <M extends typeof Model> (model: M) => value.models.get(model)!! as InstanceType<M>\r\n  models.forEach(it => {\r\n    let model = it\r\n    it.getModel = getModel\r\n    let i = 0\r\n    const proto = Object.getPrototypeOf(model)\r\n    const modelClass = proto.constructor as typeof Model\r\n    Object.getOwnPropertyNames(proto).forEach(name => {\r\n      const f = it[name]\r\n      if (name !== 'constructor' && typeof f === 'function') {\r\n        it[name] = (...args: any[]) => {\r\n          if (i === 0) model = createDraft(model)\r\n          i++\r\n          let result: any\r\n          try {\r\n            result = f.apply(it, args)\r\n            i--\r\n          } catch (e) {\r\n            i = 0\r\n            throw e\r\n          } finally {\r\n            if (i === 0) {\r\n              model = finishDraft(model)\r\n              value.models.set(modelClass, model)\r\n              value = { models: value.models }\r\n              update(!flag)\r\n            }\r\n          }\r\n          return result\r\n        }\r\n      }\r\n    })\r\n    value.models.set(modelClass, model)\r\n  })\r\n  const Provider: React.FC = ({ children }) => {\r\n    [flag, update] = useState(flag)\r\n    return <Context.Provider value={value} children={children} />\r\n  }\r\n  return Object.assign(Provider, { getModel })\r\n}\r\n\r\nexport const useModel = <T extends typeof Model> (model: T) =>\r\n  useContext(Context).models.get(model)!! as InstanceType<T>\r\n\r\nexport class Model {\r\n  public static [immerable] = true\r\n  public getModel: <M extends typeof Model> (model: M) => InstanceType<M>\r\n}\r\n","import './Chat.css'\r\nimport TimeAgo from 'timeago-react'\r\nimport SendIcon from './SendIcon'\r\nimport LoginModel from '../states/Login'\r\nimport ChatModel, { setDom } from '../states/Chat'\r\nimport React, { useState, useRef } from 'react'\r\nimport { Badge, Icon, Drawer, Input, Avatar, Card, Tag } from 'antd'\r\nimport { useModel } from '../state'\r\n\r\nconst Chat: React.FC = () => {\r\n  const ref = useRef<HTMLDivElement>()\r\n  const store = useModel(ChatModel)\r\n  const login = useModel(LoginModel)\r\n  const [visible, _setVisible] = useState(false)\r\n  const setVisible = (value: boolean) => {\r\n    store.clearState()\r\n    if (value) {\r\n      process.nextTick(() => {\r\n        ref.current.scrollTop = ref.current.scrollHeight\r\n        setDom(ref.current)\r\n      })\r\n    }\r\n    _setVisible(value)\r\n  }\r\n  return (\r\n    <>\r\n      <Badge className='chat-icon' count={+store.hasNew} dot>\r\n        <Icon\r\n          style={{ fontSize: '28px' }}\r\n          type='message'\r\n          theme='twoTone'\r\n          onClick={() => setVisible(true)}\r\n        />\r\n      </Badge>\r\n      <Drawer\r\n        className='chat'\r\n        width='100%'\r\n        visible={visible}\r\n        onClose={() => setVisible(false)}\r\n      >\r\n        <div className='messages' ref={ref}>\r\n          {store.messages.map(it => {\r\n            switch (it.type) {\r\n              case 1: return <div key={it.time} className='tag'><Tag>{it.name} 加入了游戏</Tag></div>\r\n              case 2: return <div key={it.time} className='tag'><Tag>{it.name} 离开了游戏</Tag></div>\r\n              default: return (<div key={it.time} className={it.right ? 'right' : undefined}>\r\n                <Avatar\r\n                  shape='square'\r\n                  size='large'\r\n                  src={`https://minotar.net/helm/${it.name}/40.png`}\r\n                />\r\n                <Card>\r\n                  <p className='name'>{it.name}</p>{it.message}&nbsp;&nbsp;&nbsp;&nbsp;\r\n                  <TimeAgo className='time' datetime={it.time} locale='zh_CN' />\r\n                </Card>\r\n              </div>)\r\n            }\r\n          })}\r\n        </div>\r\n        {login.token\r\n          ? login.banned\r\n            ? <Input.Search placeholder='你已被封禁!' disabled enterButton={<SendIcon />} />\r\n            : <Input.Search\r\n                placeholder='请输入聊天内容...'\r\n                onSearch={store.chat}\r\n                value={store.value}\r\n                onChange={store.setValue}\r\n                enterButton={<SendIcon />}\r\n              />\r\n          : <Input.Search placeholder='你还没有登录!' disabled enterButton={<SendIcon />} />\r\n        }\r\n      </Drawer>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Chat\r\n","import { message, Modal } from 'antd'\r\nimport { Model } from '../state'\r\nimport { MessageType } from 'antd/lib/message'\r\n\r\nconst { confirm } = Modal\r\n\r\nexport default class Login extends Model {\r\n  public token = ''\r\n  public name = ''\r\n  public banned = false\r\n  public whiteList = false\r\n  public needWhiteList = false\r\n  public loginLoading = false\r\n  public step = 0\r\n  private cacheToken = ''\r\n  private loading: MessageType\r\n  private loading2: MessageType\r\n\r\n  constructor (private socket = { s: new WebSocket('') }) {\r\n    super()\r\n  }\r\n\r\n  public checkToken (token: string) {\r\n    if (!token) return\r\n    this.loading = message.loading('验证账户中...', 0)\r\n    this.cacheToken = token\r\n    this.socket.s.send(`token|{\"token\":\"${token}\"}`)\r\n  }\r\n\r\n  public tokenReceive (data: { error: string, name: string, banned: boolean,\r\n    whiteList: boolean, needWhiteList: boolean }) {\r\n    this.loading()\r\n    if (data.error) {\r\n      this.step = 0\r\n      this.cacheToken = ''\r\n      this.name = ''\r\n      this.banned = false\r\n      this.whiteList = false\r\n      this.needWhiteList = false\r\n      message.error(data.error, 5)\r\n      localStorage.removeItem('token')\r\n    } else {\r\n      localStorage.setItem('token', this.token = this.cacheToken)\r\n      this.cacheToken = ''\r\n      this.name = data.name\r\n      this.banned = data.banned\r\n      this.whiteList = this.whiteList\r\n      this.needWhiteList = this.needWhiteList\r\n    }\r\n  }\r\n\r\n  public setLoginLoading (value: boolean) {\r\n    this.loginLoading = value\r\n  }\r\n\r\n  public setStep (value: number) {\r\n    this.step = value\r\n  }\r\n\r\n  public login (validateFields: () => Promise<any>) {\r\n    this.setLoginLoading(true)\r\n    validateFields()\r\n      .then(data => {\r\n        this.socket.s.send('login|' + JSON.stringify(data))\r\n        this.setStep(1)\r\n      })\r\n      .catch(e => {\r\n        console.error(e)\r\n        message.error('发生错误!', 5)\r\n        this.setStep(0)\r\n      })\r\n      .finally(() => this.setLoginLoading(false))\r\n  }\r\n\r\n  public loginReceive (data: { error: string, token: string }) {\r\n    if (data.error) {\r\n      this.step = 0\r\n      message.error(data.error, 5)\r\n    } else {\r\n      this.step = 2\r\n      this.checkToken(data.token)\r\n    }\r\n  }\r\n\r\n  public quit () {\r\n    confirm({\r\n      title: '是否确认退出登录?',\r\n      content: '如退出登录下次重新登录需要重新进入游戏确认, 同时本设备也会从你的记录中删除.',\r\n      okType: 'danger',\r\n      onOk: () => {\r\n        this.loading2 = message.loading('退出登录中...')\r\n        this.socket.s.send('quit|{\"token\":\"' + this.token + '\"}')\r\n      }\r\n    })\r\n  }\r\n\r\n  public quitReceive (data: { error: string, token: string }) {\r\n    if (data.error) {\r\n      message.error(data.error, 5)\r\n      return\r\n    }\r\n    if (data.token !== this.token) return\r\n    localStorage.removeItem('token')\r\n    this.token = ''\r\n    this.name = ''\r\n    this.banned = false\r\n    this.whiteList = false\r\n    this.needWhiteList = false\r\n    this.loading2()\r\n    message.success('退出登录成功!', 5)\r\n  }\r\n}\r\n","import { Model } from '../state'\r\n\r\ninterface PlayerStatus {\r\n  name: string\r\n  health: number\r\n  food: number\r\n  fishing: boolean\r\n}\r\n\r\nexport default class Home extends Model {\r\n  public players: PlayerStatus[] = []\r\n  public tps = 20\r\n\r\n  public setStatus (json: { players: PlayerStatus[], tps: number }) {\r\n    this.players = json.players\r\n    this.tps = json.tps\r\n  }\r\n}\r\n","import './Home.css'\r\nimport React, { useEffect, useState } from 'react'\r\nimport HomeModel from '../states/Home'\r\n\r\nimport Markdown from 'react-markdown'\r\nimport { useModel } from '../state'\r\nimport { Row, Col, Card, List, Avatar, Statistic, Typography, Tag } from 'antd'\r\n\r\nconst Home: React.FC = () => {\r\n  const [text, setText] = useState('')\r\n  useEffect(() => void fetch('./notice.md').then(it => it.text()).then(setText).catch(console.error), [])\r\n  const store = useModel(HomeModel)\r\n  return (\r\n    <Row id='home' className='mcp-content' gutter={16}>\r\n      <Col span={12} sm={6}>\r\n        <Card hoverable>\r\n          <Statistic\r\n            className='address'\r\n            title='服务器地址'\r\n            value=''\r\n            prefix={<Typography.Title copyable level={4}>nekocraft.net</Typography.Title>}\r\n          />\r\n        </Card>\r\n      </Col>\r\n      <Col span={12} sm={6}>\r\n        <Card hoverable>\r\n          <Statistic title='游戏版本' value='1.14.4' />\r\n        </Card>\r\n      </Col>\r\n      <Col span={12} sm={6}>\r\n        <Card hoverable>\r\n          <Statistic title='在线玩家' value={store.players.length} />\r\n        </Card>\r\n      </Col>\r\n      <Col span={12} sm={6}>\r\n        <Card hoverable>\r\n          <Statistic title='TPS' value={store.tps} precision={2} />\r\n        </Card>\r\n      </Col>\r\n      <Col span={24} sm={12}>\r\n        <Card title='玩家列表' className='players' hoverable>\r\n          <List\r\n            itemLayout='horizontal'\r\n            dataSource={store.players}\r\n            renderItem={item => (\r\n              <List.Item>\r\n                <List.Item.Meta\r\n                  avatar={\r\n                    <Avatar\r\n                      shape='square'\r\n                      size='large'\r\n                      src={`https://minotar.net/helm/${item.name}/40.png`}\r\n                    />\r\n                  }\r\n                  title={<>{item.name} {item.fishing && <Tag>摸鱼中</Tag>}</>}\r\n                  description={<>\r\n                    <div className='health' />\r\n                    <div className='health-full' style={{ width: item.health / 20 * 140 }} />\r\n                    <div className='food' />\r\n                    <div className='food-full' style={{ width: item.food / 20 * 140 }} />\r\n                  </>}\r\n                />\r\n              </List.Item>\r\n            )}\r\n          />\r\n        </Card>\r\n      </Col>\r\n      <Col span={24} sm={12}>\r\n        <Card title='公告' hoverable loading={!text}>\r\n          <Markdown source={text} />\r\n        </Card>\r\n      </Col>\r\n    </Row>\r\n  )\r\n}\r\n\r\nexport default Home\r\n","import './Maps.css'\r\nimport React, { useState } from 'react'\r\nimport { Spin } from 'antd'\r\n\r\nconst Maps: React.FC = () => {\r\n  const [loading, setLoading] = useState(true)\r\n  return (\r\n    <div id='maps'>\r\n      <Spin spinning={loading} size='large'>\r\n        <iframe\r\n          onLoad={() => setLoading(false)}\r\n          title='NekoCraft | 网页地图'\r\n          width='100%'\r\n          height='100%'\r\n          frameBorder='none'\r\n          src='http://play.nekocraft.net:18123'\r\n        />\r\n      </Spin>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Maps\r\n","import { Model } from '../state'\r\nimport moment from 'moment'\r\n\r\nexport interface PlayerInfo {\r\n  banned: boolean\r\n  loginTime: number\r\n  loginTimeText: string\r\n  name: string\r\n  op: boolean\r\n  registerTime: number\r\n  registerTimeText: string\r\n  whiteList: boolean\r\n}\r\n\r\ninterface BanInfo {\r\n  name: string\r\n  reason: string\r\n  from: string\r\n  to?: string\r\n  source: string\r\n}\r\n\r\nexport default class List extends Model {\r\n  public players: PlayerInfo[] = []\r\n  public banList: BanInfo[] = []\r\n\r\n  constructor (private socket = { s: new WebSocket('') }) { super() }\r\n\r\n  public getList () {\r\n    if (this.socket.s.readyState === this.socket.s.CONNECTING) {\r\n      const f = () => {\r\n        this.socket.s.send('list|')\r\n        this.socket.s.removeEventListener('open', f)\r\n      }\r\n      this.socket.s.addEventListener('open', f)\r\n    } else this.socket.s.send('list|')\r\n  }\r\n\r\n  public listReceive (data: { players: PlayerInfo[], ban: BanInfo[] }) {\r\n    const p = { }\r\n    data.players.forEach(it => {\r\n      it.loginTimeText = moment(it.loginTime).format('YYYY/MM/DD HH:mm:ss')\r\n      it.registerTimeText = moment(it.registerTime).format('YYYY/MM/DD HH:mm:ss')\r\n      p[it.name] = it\r\n    })\r\n    this.players = Object.values(p)\r\n    this.banList = data.ban.map(it => ({\r\n      name: it.name,\r\n      reason: it.reason,\r\n      from: moment(it.from).format('LLLL'),\r\n      to: it.to && moment(it.to).format('LLLL'),\r\n      source: it.source\r\n    }))\r\n    console.log(this.banList)\r\n  }\r\n}\r\n","import './List.css'\r\nimport React, { useEffect } from 'react'\r\nimport ListModel, { PlayerInfo } from '../states/List'\r\nimport { useModel } from '../state'\r\nimport { Row, Col, Card, List, Avatar, Popover, Button, Tag, Table } from 'antd'\r\n\r\nconst columns = [\r\n  {\r\n    title: '游戏名',\r\n    dataIndex: 'name',\r\n    render: (it: string, p: PlayerInfo) => (\r\n      <>\r\n        <Avatar\r\n          shape='square'\r\n          size='large'\r\n          src={`https://minotar.net/helm/${it}/40.png`}\r\n        />&nbsp;&nbsp;{it} {p.op && <Tag color='geekblue'>管理员</Tag>}{p.banned && <Tag color='red'>已被封禁</Tag>}\r\n      </>\r\n    )\r\n  },\r\n  {\r\n    title: '最后登录',\r\n    dataIndex: 'loginTimeText',\r\n    sorter: (a: PlayerInfo, b: PlayerInfo) => a.loginTime - b.loginTime\r\n  },\r\n  {\r\n    title: '注册时间',\r\n    dataIndex: 'registerTimeText',\r\n    sorter: (a: PlayerInfo, b: PlayerInfo) => a.registerTime - b.registerTime\r\n  }\r\n]\r\n\r\nconst ListPage: React.FC = () => {\r\n  const store = useModel(ListModel)\r\n  useEffect(store.getList, [])\r\n  return (\r\n    <Row id='list' className='mcp-content' gutter={16}>\r\n      <Col span={24} sm={12}>\r\n        <Card title='封禁列表' className='card'>\r\n          <List\r\n            itemLayout='horizontal'\r\n            dataSource={store.banList}\r\n            renderItem={it => (\r\n              <List.Item>\r\n                <List.Item.Meta\r\n                  avatar={\r\n                    <Avatar\r\n                      shape='square'\r\n                      size='large'\r\n                      src={`https://minotar.net/helm/${it.name}/40.png`}\r\n                    />\r\n                  }\r\n                  title={<>{it.name} {!it.to && <Tag color='red'>永久封禁</Tag>}</>}\r\n                  description={(\r\n                    <>{it.reason}<Popover content={(<>\r\n                      <p>封禁者: {it.source}</p>\r\n                      <p>封禁时间: {it.from}</p>\r\n                      <p>解除时间: {it.to || '无'}</p>\r\n                    </>)}>\r\n                    <Button type='link'>查看更多</Button></Popover></>)}\r\n                />\r\n              </List.Item>\r\n            )}\r\n          />\r\n        </Card>\r\n      </Col>\r\n      <Col span={24} sm={12}>\r\n      <Card title='玩家列表' className='card players'>\r\n        <Table\r\n          rowKey='name'\r\n          columns={columns}\r\n          dataSource={store.players}\r\n          scroll={{ x: 'max-content' }}\r\n          pagination={false}\r\n        />\r\n      </Card>\r\n      </Col>\r\n    </Row>\r\n  )\r\n}\r\n\r\nexport default ListPage\r\n","import React from 'react'\r\nimport useReactRouter from 'use-react-router'\r\nimport { Menu, Icon } from 'antd'\r\nimport { Switch, Link, Redirect, Route } from 'react-router-dom'\r\n\r\nimport Home from './routes/Home'\r\nimport Maps from './routes/Maps'\r\nimport List from './routes/List'\r\nimport About from './routes/About'\r\n\r\nconst routes = [\r\n  {\r\n    path: '/home',\r\n    icon: 'home',\r\n    name: '主页',\r\n    component: Home\r\n  },\r\n  {\r\n    path: '/maps',\r\n    icon: 'compass',\r\n    name: '地图',\r\n    component: Maps\r\n  },\r\n  {\r\n    path: '/list',\r\n    icon: 'unordered-list',\r\n    name: '封禁与白名单',\r\n    component: List\r\n  },\r\n  {\r\n    path: '/about',\r\n    icon: 'question',\r\n    name: '萌新必看',\r\n    component: About\r\n  }\r\n]\r\n\r\nconst routeMapped = routes.map(args => <Route key={args.path} {...args} />)\r\nconst Routes: React.FC = () => (\r\n  <Switch>\r\n    {routeMapped}\r\n    <Redirect to='/home' />\r\n  </Switch>\r\n)\r\n\r\nconst routeMenus = routes.map(({ path, icon, name }) => (\r\n  <Menu.Item key={path}>\r\n    <Link to={path}>\r\n      <Icon type={icon} />\r\n      <span>{name}</span>\r\n    </Link>\r\n  </Menu.Item>\r\n))\r\n\r\nconst Menus: React.FC<{ theme?: undefined | 'dark' }> = ({ theme }) => {\r\n  const { location: { pathname } } = useReactRouter()\r\n  return <Menu theme={theme} mode='inline' selectedKeys={[pathname]}>{routeMenus}</Menu>\r\n}\r\n\r\nexport { Menus, Routes }\r\n","import './Maps.css'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { Spin, Card } from 'antd'\r\nimport Markdown from 'react-markdown'\r\n\r\nconst About: React.FC = () => {\r\n  const [loading, setLoading] = useState(true)\r\n  const [data, setData] = useState('')\r\n  useEffect(() => void fetch('about_content.md')\r\n    .then(it => it.text())\r\n    .then(setData)\r\n    .catch(console.error)\r\n    .then(() => setLoading(false)), []\r\n  )\r\n  return (\r\n    <div id='maps' style={{ overflowY: 'auto', padding: 16, height: loading ? '100%' : 'auto' }}>\r\n      <Spin spinning={loading} size='large'>\r\n        <Card hoverable><Markdown source={data} /></Card>\r\n      </Spin>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default About\r\n","import React, { useState } from 'react'\r\nimport useForm from 'rc-form-hooks'\r\nimport LoginModel from '../states/Login'\r\nimport HomeModel from '../states/Home'\r\nimport { useModel } from '../state'\r\nimport { Avatar, Menu, Modal, Steps, Icon, Form, Input,\r\n  Button, Spin, Result, Tooltip, Row, Col, Select, Dropdown } from 'antd'\r\n\r\nconst { Step } = Steps\r\nconst { Item } = Form\r\n\r\n/* eslint-disable jsx-a11y/anchor-is-valid */\r\n\r\nconst Login: React.FC = () => {\r\n  const [visible, setVisible] = useState(false)\r\n  const store = useModel(LoginModel)\r\n  const { players } = useModel(HomeModel)\r\n  const { getFieldDecorator, validateFields } = useForm<{\r\n    userName: string\r\n    name: string\r\n  }>()\r\n  const closeModel = () => setVisible(false)\r\n\r\n  return (\r\n    <>\r\n      {store.token\r\n        ? (<Dropdown overlay={(<Menu>\r\n              <Menu.Item key='0' disabled>用户名: {store.name}</Menu.Item>\r\n              <Menu.Item key='2' disabled>{store.banned ? '已被封禁' : '状态正常'}</Menu.Item>\r\n              <Menu.Divider />\r\n              <Menu.Item key='1'>\r\n                <a onClick={store.quit}>退出登录</a>\r\n              </Menu.Item>\r\n            </Menu>)} placement='bottomRight'>\r\n            <Avatar\r\n              className='head'\r\n              shape='square'\r\n              size='large'\r\n              src={`https://minotar.net/helm/${store.name}/40.png`}\r\n            />\r\n          </Dropdown>)\r\n        : (<Tooltip placement='bottomLeft' title='点击这里以登录' defaultVisible>\r\n          <Avatar\r\n            {...({ onClick: () => {\r\n              store.setStep(0)\r\n              setVisible(true)\r\n            } } as any)}\r\n            className='head'\r\n            shape='square'\r\n            size='large'\r\n            icon='user'\r\n          />\r\n        </Tooltip>)\r\n      }\r\n      <Modal\r\n        title='登录'\r\n        visible={visible}\r\n        onCancel={closeModel}\r\n        footer={null}\r\n        bodyStyle={{ textAlign: 'center' }}\r\n      >\r\n        <Steps current={store.step} style={{ textAlign: 'left', marginBottom: 20 }}>\r\n          <Step title='输入信息' icon={<Icon type='user' />} />\r\n          <Step title='验证' icon={<Icon type='solution' />} />\r\n          <Step title='完成' icon={<Icon type='smile-o' />} />\r\n        </Steps>\r\n        {store.step === 0\r\n          ? (<Form\r\n              onSubmit={e => {\r\n                e.preventDefault()\r\n                store.login(validateFields)\r\n              }}\r\n            >\r\n              <Row gutter={12}>\r\n                <Col span={24} md={10}>\r\n                  <Item hasFeedback>\r\n                    {getFieldDecorator('userName', {\r\n                      rules: [\r\n                        { required: true, message: '请选择你的游戏名!' }\r\n                      ]\r\n                    })(<Select\r\n                        disabled={store.loginLoading}\r\n                        placeholder='请选择你的游戏名'\r\n                      >\r\n                      {players.map(it => <Select.Option key={it.name} value={it.name}>{it.name}</Select.Option>)}\r\n                    </Select>\r\n                    )}\r\n                  </Item>\r\n                </Col>\r\n                <Col span={24} md={10}>\r\n                  <Item hasFeedback>\r\n                    {getFieldDecorator('name', {\r\n                      rules: [\r\n                        { required: true, message: '请输入当前设备标识!' },\r\n                        { min: 2, message: '设备标识不能少于2位!' },\r\n                        { max: 16, message: '设备标识不能大于16位!' }\r\n                      ]\r\n                    })(<Input\r\n                      disabled={store.loginLoading}\r\n                      prefix={<Icon type='flag' style={{ color: 'rgba(0,0,0,.25)' }} />}\r\n                      placeholder='设备标识'\r\n                    />)}\r\n                  </Item>\r\n                </Col>\r\n                <Col span={24} md={2}>\r\n                  <Item>\r\n                    <Button type='primary' htmlType='submit' loading={store.loginLoading}>登录</Button>\r\n                  </Item>\r\n                </Col>\r\n                <Col span={24}>\r\n                  <Item extra='请登入MC服务器再进行操作.' />\r\n                </Col>\r\n              </Row>\r\n            </Form>)\r\n          : store.step === 1 ? <Spin tip='请您进入NekoCraft服务器, 根据游戏中的提示完成验证' /> : <Result\r\n              status='success'\r\n              title='成功登录!'\r\n              extra={[<Button type='primary' key='0' onClick={closeModel}>返回</Button>]}\r\n            />\r\n          }\r\n      </Modal>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Login\r\n","import { message } from 'antd'\r\nimport { getProvider } from '../state'\r\nimport Home from './Home'\r\nimport Chat from './Chat'\r\nimport Login from './Login'\r\nimport List from './List'\r\n\r\nconst socket: { s: WebSocket } = { s: null }\r\nconst Provider = getProvider(new Home(), new Chat(socket), new Login(socket), new List(socket))\r\n\r\nconst homeModel = Provider.getModel(Home)\r\nconst chatModel = Provider.getModel(Chat)\r\nconst loginModel = Provider.getModel(Login)\r\nconst listModel = Provider.getModel(List)\r\n\r\nconst mapping = {\r\n  status: homeModel.setStatus,\r\n  chat: chatModel.receive,\r\n  login: loginModel.loginReceive,\r\n  token: loginModel.tokenReceive,\r\n  playerJoin: chatModel.playerJoin,\r\n  playerQuit: chatModel.playerQuit,\r\n  list: listModel.listReceive,\r\n  quit: loginModel.quitReceive,\r\n  dialog: (d: any) => message[d.kind](d.message, 5)\r\n}\r\n\r\nconst f = () => {\r\n  const close = message.loading('连接服务器中...')\r\n  socket.s = new WebSocket(process.env.NODE_ENV === 'production'\r\n    ? 'ws://play.nekocraft.net:18124/ws'\r\n    : 'ws://127.0.0.1:8080/ws'\r\n  )\r\n  socket.s.onmessage = ({ data }) => {\r\n    if (!data) return\r\n    const d = JSON.parse(data)\r\n    if (d.type) {\r\n      if (d.type in mapping) mapping[d.type](d)\r\n      else console.error(d.type, '没有对应的操作!')\r\n    }\r\n  }\r\n\r\n  socket.s.onopen = () => {\r\n    close()\r\n    const token = localStorage.getItem('token')\r\n    if (token) loginModel.checkToken(token)\r\n  }\r\n\r\n  socket.s.onclose = () => {\r\n    message.error('连接已断开!')\r\n    setTimeout(f, 5000)\r\n  }\r\n}\r\nf()\r\n\r\nexport default Provider\r\n","import './App.css'\r\nimport React, { useState } from 'react'\r\nimport { BrowserRouter as Router } from 'react-router-dom'\r\nimport { Typography, Layout, Icon, Drawer, BackTop } from 'antd'\r\nimport { Menus, Routes } from './Routes'\r\nimport Login from './components/Login'\r\nimport Chat from './components/Chat'\r\nimport Provider from './states/index'\r\n\r\nconst { Header, Sider, Content } = Layout\r\n\r\nconst App: React.FC = () => {\r\n  const [collapsed, updateCollapsed] = useState(window.innerWidth < 992)\r\n  const toggle = () => updateCollapsed(!collapsed)\r\n  const [drawer, updateDrawer] = useState(false)\r\n\r\n  return (\r\n    <Provider>\r\n      <Router>\r\n        <Layout id='mcp-app'>\r\n          <Sider\r\n            style={{ display: drawer ? 'none' : '' }}\r\n            trigger={null}\r\n            collapsible\r\n            breakpoint='lg'\r\n            onBreakpoint={updateDrawer}\r\n            collapsedWidth='0'\r\n            collapsed={collapsed}\r\n          >\r\n            <div id='mcp-logo' />\r\n            <Menus theme='dark' />\r\n          </Sider>\r\n          <Drawer\r\n            title={<div id='mcp-logo' />}\r\n            className='no-padding'\r\n            placement='left'\r\n            closable={false}\r\n            onClose={() => updateCollapsed(true)}\r\n            visible={drawer && !collapsed}\r\n          >\r\n            <Menus />\r\n          </Drawer>\r\n          <Layout>\r\n            <Header style={{\r\n              background: '#fff',\r\n              padding: 0,\r\n              position: 'fixed',\r\n              width: '100%',\r\n              zIndex: 1\r\n            }} >\r\n              <Icon\r\n                className='trigger'\r\n                type={collapsed ? 'menu-unfold' : 'menu-fold'}\r\n                onClick={toggle}\r\n              />\r\n              <Typography.Title level={3}>NekoCraft</Typography.Title>\r\n            </Header>\r\n            <Chat />\r\n            <Login />\r\n            <Content\r\n              style={{\r\n                minHeight: 280,\r\n                marginTop: 64\r\n              }}\r\n            >\r\n              <BackTop />\r\n              <Routes />\r\n            </Content>\r\n          </Layout>\r\n        </Layout>\r\n      </Router>\r\n    </Provider>\r\n  )\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n)\r\n\r\ninterface Config {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\r\n}\r\n\r\nexport function register (config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    )\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config)\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          )\r\n        })\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config)\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nfunction registerValidSW (swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing\r\n        if (installingWorker == null) {\r\n          return\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              )\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration)\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.')\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration)\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error)\r\n    })\r\n}\r\n\r\nfunction checkValidServiceWorker (swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type')\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload()\r\n          })\r\n        })\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config)\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      )\r\n    })\r\n}\r\n\r\nexport function unregister () {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister()\r\n    })\r\n  }\r\n}\r\n","import 'moment/locale/zh-cn'\r\nimport React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\nimport zhCN from 'antd/es/locale/zh_CN'\r\nimport * as moment from 'moment'\r\nimport * as serviceWorker from './serviceWorker'\r\nimport { ConfigProvider } from 'antd'\r\n\r\nconst dom = document.getElementById('root')\r\nif (!('WebSocket' in window) || !('Proxy' in window) || !('fetch' in window)) {\r\n  dom.innerHTML = '您的设备不支持显示本页面, 请更新至最新版的 Chrome 以获得最佳体验!'\r\n} else {\r\n  moment.locale('zh')\r\n\r\n  ReactDOM.render(<ConfigProvider locale={zhCN}><App /></ConfigProvider>, dom)\r\n\r\n  serviceWorker.register()\r\n}\r\n","import LoginModel from './Login'\r\nimport { Model } from '../state'\r\n\r\ninterface Message {\r\n  name: string\r\n  message?: string\r\n  time: number\r\n  type?: number\r\n  right?: boolean\r\n}\r\n\r\nlet dom: HTMLDivElement\r\n\r\nexport const setDom = (d: HTMLDivElement) => (dom = d)\r\n\r\nconst scroll = () => {\r\n  if (dom && dom.scrollTop === dom.scrollHeight - dom.clientHeight) {\r\n    process.nextTick(() => (dom.scrollTop = dom.scrollHeight))\r\n  }\r\n}\r\n\r\nexport default class Chat extends Model {\r\n  public messages: Message[] = []\r\n  public hasNew = false\r\n  public value = ''\r\n\r\n  constructor (private socket = { s: new WebSocket('') }) { super() }\r\n\r\n  public setValue (e: any) {\r\n    this.value = e.target.value\r\n  }\r\n\r\n  public receive (json: { name: string, message: string }) {\r\n    scroll()\r\n    this.messages.push({\r\n      name: json.name,\r\n      message: json.message,\r\n      time: Date.now(),\r\n      right: this.getModel(LoginModel).name === json.name\r\n    })\r\n    this.hasNew = true\r\n  }\r\n\r\n  public clearState () {\r\n    this.hasNew = false\r\n  }\r\n\r\n  public playerJoin (data: { name: string }) {\r\n    scroll()\r\n    this.messages.push({ name: data.name, type: 1, time: Date.now() })\r\n  }\r\n\r\n  public playerQuit (data: { name: string }) {\r\n    this.messages.push({ name: data.name, type: 2, time: Date.now() })\r\n  }\r\n\r\n  public chat () {\r\n    this.socket.s.send('chat|' + JSON.stringify({ message: this.value }))\r\n    this.value = ''\r\n  }\r\n}\r\n"],"sourceRoot":""}