{"version":3,"sources":["components/SendIcon.tsx","state.tsx","components/Chat.tsx","states/Login.ts","states/Home.ts","routes/Home.tsx","routes/Maps.tsx","states/List.ts","routes/List.tsx","Routes.tsx","routes/About.tsx","components/Login.tsx","states/index.ts","App.tsx","serviceWorker.ts","index.tsx","states/Chat.ts"],"names":["Svg","viewBox","width","height","fill","d","component","Context","createContext","models","Map","getProvider","update","flag","value","getModel","model","get","forEach","it","i","proto","Object","getPrototypeOf","modelClass","constructor","getOwnPropertyNames","name","f","result","createDraft","args","apply","e","finishDraft","set","Provider","children","useState","assign","useModel","useContext","Model","immerable","Chat","ref","useRef","store","ChatModel","login","LoginModel","visible","_setVisible","setVisible","clearState","process","nextTick","current","scrollTop","scrollHeight","setDom","className","count","hasNew","dot","style","fontSize","type","theme","onClick","onClose","messages","map","key","time","right","undefined","shape","size","src","message","datetime","locale","token","banned","Search","placeholder","disabled","enterButton","onSearch","chat","onChange","setValue","confirm","Login","socket","s","WebSocket","whiteList","needWhiteList","loginLoading","step","cacheToken","loading","loading2","this","send","data","error","localStorage","removeItem","setItem","validateFields","setLoginLoading","then","JSON","stringify","setStep","catch","console","finally","checkToken","title","content","okType","onOk","success","Home","players","tps","json","text","setText","useEffect","fetch","HomeModel","id","gutter","span","sm","hoverable","prefix","Title","copyable","level","length","precision","itemLayout","dataSource","renderItem","item","Item","Meta","avatar","fishing","description","health","food","source","Maps","setLoading","spinning","onLoad","frameBorder","List","banList","readyState","CONNECTING","addEventListener","removeEventListener","p","loginTimeText","moment","loginTime","format","registerTimeText","registerTime","values","ban","reason","from","to","log","columns","dataIndex","render","op","color","sorter","a","b","routes","path","icon","ListModel","getList","rowKey","scroll","x","pagination","setData","overflowY","padding","routeMapped","Routes","routeMenus","Menus","pathname","useReactRouter","location","mode","selectedKeys","Step","useForm","getFieldDecorator","closeModel","overlay","Divider","quit","placement","defaultVisible","onCancel","footer","bodyStyle","textAlign","marginBottom","onSubmit","preventDefault","md","hasFeedback","rules","required","Option","min","max","htmlType","extra","tip","status","homeModel","chatModel","loginModel","listModel","mapping","setStatus","receive","loginReceive","tokenReceive","playerJoin","playerQuit","list","listReceive","quitReceive","dialog","kind","close","onmessage","parse","onopen","getItem","onclose","setTimeout","Header","Sider","Content","App","window","innerWidth","collapsed","updateCollapsed","drawer","updateDrawer","display","trigger","collapsible","breakpoint","onBreakpoint","collapsedWidth","closable","background","position","zIndex","minHeight","marginTop","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","dom","document","getElementById","ReactDOM","zhCN","URL","href","origin","response","contentType","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","innerHTML","clientHeight","target","push","Date","now"],"mappings":"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","file":"static/js/main.3587c39c.chunk.js","sourcesContent":["import React from 'react'\nimport { Icon } from 'antd'\n\n// tslint:disable:max-line-length\nconst Svg = () => (\n  <svg viewBox='0 0 1025 1024' width='1em' height='1em' fill='currentColor'>\n    <path d='M971.388 23.76L28.098 518.406c-38.803 20.337-37.211 50.146 3.502 66.264l120.429 47.598c40.633 16.079 102.24 7.363 136.785-19.66l523.024-412.426c34.386-27.102 38.087-23.082 8.198 8.915l-413.5 442.672c-29.968 31.878-21.053 70.96 19.7 86.84l14.089 5.531c40.753 15.76 107.374 42.266 147.929 58.821l133.561 54.364c40.594 16.517 73.786 30.207 73.786 30.446 0 .239.238.995.437 1.035.2.08 9.79-34.386 21.252-76.651l203.686-748.48c11.462-42.305-10.785-60.214-49.588-39.917zM410.874 788.794l-92.41-37.808c-40.515-16.595-59.936 2.866-43.141 43.34.04 0 85.804 206.71 83.416 213.994-2.467 7.243 82.302-122.658 82.302-122.658C465 848.97 451.39 805.39 410.874 788.794z' />\n  </svg>\n)\n\nexport default () => <Icon component={Svg} />\n","import { createDraft, finishDraft, immerable } from 'immer'\nimport React, { createContext, useState, useContext } from 'react'\n\nexport const Context = createContext({ models: new Map<typeof Model, Model>() })\n\nexport const getProvider = (...models: Model[]) => {\n  let update: (data: boolean) => void = () => {}\n  let flag = false\n  let value = { models: new Map<typeof Model, Model>() }\n  const getModel = <M extends typeof Model> (model: M) => value.models.get(model)!! as InstanceType<M>\n  models.forEach(it => {\n    let model = it\n    it.getModel = getModel\n    let i = 0\n    const proto = Object.getPrototypeOf(model)\n    const modelClass = proto.constructor as typeof Model\n    Object.getOwnPropertyNames(proto).forEach(name => {\n      const f = it[name]\n      if (name !== 'constructor' && typeof f === 'function') {\n        it[name] = (...args: any[]) => {\n          if (i === 0) model = createDraft(model)\n          i++\n          let result: any\n          try {\n            result = f.apply(it, args)\n            i--\n          } catch (e) {\n            i = 0\n            throw e\n          } finally {\n            if (i === 0) {\n              model = finishDraft(model)\n              value.models.set(modelClass, model)\n              value = { models: value.models }\n              update(!flag)\n            }\n          }\n          return result\n        }\n      }\n    })\n    value.models.set(modelClass, model)\n  })\n  const Provider: React.FC = ({ children }) => {\n    [flag, update] = useState(flag)\n    return <Context.Provider value={value} children={children} />\n  }\n  return Object.assign(Provider, { getModel })\n}\n\nexport const useModel = <T extends typeof Model> (model: T) =>\n  useContext(Context).models.get(model)!! as InstanceType<T>\n\nexport class Model {\n  public static [immerable] = true\n  public getModel: <M extends typeof Model> (model: M) => InstanceType<M>\n}\n","import './Chat.css'\nimport TimeAgo from 'timeago-react'\nimport SendIcon from './SendIcon'\nimport LoginModel from '../states/Login'\nimport ChatModel, { setDom } from '../states/Chat'\nimport React, { useState, useRef } from 'react'\nimport { Badge, Icon, Drawer, Input, Avatar, Card, Tag } from 'antd'\nimport { useModel } from '../state'\n\nconst Chat: React.FC = () => {\n  const ref = useRef<HTMLDivElement>()\n  const store = useModel(ChatModel)\n  const login = useModel(LoginModel)\n  const [visible, _setVisible] = useState(false)\n  const setVisible = (value: boolean) => {\n    store.clearState()\n    if (value) {\n      process.nextTick(() => {\n        ref.current.scrollTop = ref.current.scrollHeight\n        setDom(ref.current)\n      })\n    }\n    _setVisible(value)\n  }\n  return (\n    <>\n      <Badge className='chat-icon' count={+store.hasNew} dot>\n        <Icon\n          style={{ fontSize: '28px' }}\n          type='message'\n          theme='twoTone'\n          onClick={() => setVisible(true)}\n        />\n      </Badge>\n      <Drawer\n        className='chat'\n        width='100%'\n        visible={visible}\n        onClose={() => setVisible(false)}\n      >\n        <div className='messages' ref={ref}>\n          {store.messages.map(it => {\n            switch (it.type) {\n              case 1: return <div key={it.time} className='tag'><Tag>{it.name} 加入了游戏</Tag></div>\n              case 2: return <div key={it.time} className='tag'><Tag>{it.name} 离开了游戏</Tag></div>\n              default: return (<div key={it.time} className={it.right ? 'right' : undefined}>\n                <Avatar\n                  shape='square'\n                  size='large'\n                  src={`https://minotar.net/helm/${it.name}/40.png`}\n                />\n                <Card>\n                  <p className='name'>{it.name}</p>{it.message}&nbsp;&nbsp;&nbsp;&nbsp;\n                  <TimeAgo className='time' datetime={it.time} locale='zh_CN' />\n                </Card>\n              </div>)\n            }\n          })}\n        </div>\n        {login.token\n          ? login.banned\n            ? <Input.Search placeholder='你已被封禁!' disabled enterButton={<SendIcon />} />\n            : <Input.Search\n                placeholder='请输入聊天内容...'\n                onSearch={store.chat}\n                value={store.value}\n                onChange={store.setValue}\n                enterButton={<SendIcon />}\n              />\n          : <Input.Search placeholder='你还没有登录!' disabled enterButton={<SendIcon />} />\n        }\n      </Drawer>\n    </>\n  )\n}\n\nexport default Chat\n","import { message, Modal } from 'antd'\nimport { Model } from '../state'\nimport { MessageType } from 'antd/lib/message'\n\nconst { confirm } = Modal\n\nexport default class Login extends Model {\n  public token = ''\n  public name = ''\n  public banned = false\n  public whiteList = false\n  public needWhiteList = false\n  public loginLoading = false\n  public step = 0\n  private cacheToken = ''\n  private loading: MessageType\n  private loading2: MessageType\n\n  constructor (private socket = { s: new WebSocket('') }) {\n    super()\n  }\n\n  public checkToken (token: string) {\n    if (!token) return\n    this.loading = message.loading('验证账户中...', 0)\n    this.cacheToken = token\n    this.socket.s.send(`token|{\"token\":\"${token}\"}`)\n  }\n\n  public tokenReceive (data: { error: string, name: string, banned: boolean,\n    whiteList: boolean, needWhiteList: boolean }) {\n    this.loading()\n    if (data.error) {\n      this.step = 0\n      this.cacheToken = ''\n      this.name = ''\n      this.banned = false\n      this.whiteList = false\n      this.needWhiteList = false\n      message.error(data.error, 5)\n      localStorage.removeItem('token')\n    } else {\n      localStorage.setItem('token', this.token = this.cacheToken)\n      this.cacheToken = ''\n      this.name = data.name\n      this.banned = data.banned\n      this.whiteList = this.whiteList\n      this.needWhiteList = this.needWhiteList\n    }\n  }\n\n  public setLoginLoading (value: boolean) {\n    this.loginLoading = value\n  }\n\n  public setStep (value: number) {\n    this.step = value\n  }\n\n  public login (validateFields: () => Promise<any>) {\n    this.setLoginLoading(true)\n    validateFields()\n      .then(data => {\n        this.socket.s.send('login|' + JSON.stringify(data))\n        this.setStep(1)\n      })\n      .catch(e => {\n        console.error(e)\n        message.error('发生错误!', 5)\n        this.setStep(0)\n      })\n      .finally(() => this.setLoginLoading(false))\n  }\n\n  public loginReceive (data: { error: string, token: string }) {\n    if (data.error) {\n      this.step = 0\n      message.error(data.error, 5)\n    } else {\n      this.step = 2\n      this.checkToken(data.token)\n    }\n  }\n\n  public quit () {\n    confirm({\n      title: '是否确认退出登录?',\n      content: '如退出登录下次重新登录需要重新进入游戏确认, 同时本设备也会从你的记录中删除.',\n      okType: 'danger',\n      onOk: () => {\n        this.loading2 = message.loading('退出登录中...')\n        this.socket.s.send('quit|{\"token\":\"' + this.token + '\"}')\n      }\n    })\n  }\n\n  public quitReceive (data: { error: string, token: string }) {\n    if (data.error) {\n      message.error(data.error, 5)\n      return\n    }\n    if (data.token !== this.token) return\n    localStorage.removeItem('token')\n    this.token = ''\n    this.name = ''\n    this.banned = false\n    this.whiteList = false\n    this.needWhiteList = false\n    this.loading2()\n    message.success('退出登录成功!', 5)\n  }\n}\n","import { Model } from '../state'\n\ninterface PlayerStatus {\n  name: string\n  health: number\n  food: number\n  fishing: boolean\n}\n\nexport default class Home extends Model {\n  public players: PlayerStatus[] = []\n  public tps = 20\n\n  public setStatus (json: { players: PlayerStatus[], tps: number }) {\n    this.players = json.players\n    this.tps = json.tps\n  }\n}\n","import './Home.css'\nimport React, { useEffect, useState } from 'react'\nimport HomeModel from '../states/Home'\n\nimport Markdown from 'react-markdown'\nimport { useModel } from '../state'\nimport { Row, Col, Card, List, Avatar, Statistic, Typography, Tag } from 'antd'\n\nconst Home: React.FC = () => {\n  const [text, setText] = useState('')\n  useEffect(() => void fetch('./notice.md').then(it => it.text()).then(setText).catch(console.error), [])\n  const store = useModel(HomeModel)\n  return (\n    <Row id='home' className='mcp-content' gutter={16}>\n      <Col span={12} sm={6}>\n        <Card hoverable>\n          <Statistic\n            className='address'\n            title='服务器地址'\n            value=''\n            prefix={<Typography.Title copyable level={4}>nekocraft.net</Typography.Title>}\n          />\n        </Card>\n      </Col>\n      <Col span={12} sm={6}>\n        <Card hoverable>\n          <Statistic title='游戏版本' value='1.14.4' />\n        </Card>\n      </Col>\n      <Col span={12} sm={6}>\n        <Card hoverable>\n          <Statistic title='在线玩家' value={store.players.length} />\n        </Card>\n      </Col>\n      <Col span={12} sm={6}>\n        <Card hoverable>\n          <Statistic title='TPS' value={store.tps} precision={2} />\n        </Card>\n      </Col>\n      <Col span={24} sm={12}>\n        <Card title='玩家列表' className='players' hoverable>\n          <List\n            itemLayout='horizontal'\n            dataSource={store.players}\n            renderItem={item => (\n              <List.Item>\n                <List.Item.Meta\n                  avatar={\n                    <Avatar\n                      shape='square'\n                      size='large'\n                      src={`https://minotar.net/helm/${item.name}/40.png`}\n                    />\n                  }\n                  title={<>{item.name} {item.fishing && <Tag>摸鱼中</Tag>}</>}\n                  description={<>\n                    <div className='health' />\n                    <div className='health-full' style={{ width: item.health / 20 * 140 }} />\n                    <div className='food' />\n                    <div className='food-full' style={{ width: item.food / 20 * 140 }} />\n                  </>}\n                />\n              </List.Item>\n            )}\n          />\n        </Card>\n      </Col>\n      <Col span={24} sm={12}>\n        <Card title='公告' hoverable loading={!text}>\n          <Markdown source={text} />\n        </Card>\n      </Col>\n    </Row>\n  )\n}\n\nexport default Home\n","import './Maps.css'\nimport React, { useState } from 'react'\nimport { Spin } from 'antd'\n\nconst Maps: React.FC = () => {\n  const [loading, setLoading] = useState(true)\n  return (\n    <div id='maps'>\n      <Spin spinning={loading} size='large'>\n        <iframe\n          onLoad={() => setLoading(false)}\n          title='NekoCraft | 网页地图'\n          width='100%'\n          height='100%'\n          frameBorder='none'\n          src='http://play.nekocraft.net:8123'\n        />\n      </Spin>\n    </div>\n  )\n}\n\nexport default Maps\n","import { Model } from '../state'\nimport moment from 'moment'\n\nexport interface PlayerInfo {\n  banned: boolean\n  loginTime: number\n  loginTimeText: string\n  name: string\n  op: boolean\n  registerTime: number\n  registerTimeText: string\n  whiteList: boolean\n}\n\ninterface BanInfo {\n  name: string\n  reason: string\n  from: string\n  to?: string\n  source: string\n}\n\nexport default class List extends Model {\n  public players: PlayerInfo[] = []\n  public banList: BanInfo[] = []\n\n  constructor (private socket = { s: new WebSocket('') }) { super() }\n\n  public getList () {\n    if (this.socket.s.readyState === this.socket.s.CONNECTING) {\n      const f = () => {\n        this.socket.s.send('list|')\n        this.socket.s.removeEventListener('open', f)\n      }\n      this.socket.s.addEventListener('open', f)\n    } else this.socket.s.send('list|')\n  }\n\n  public listReceive (data: { players: PlayerInfo[], ban: BanInfo[] }) {\n    const p = { }\n    data.players.forEach(it => {\n      it.loginTimeText = moment(it.loginTime).format('YYYY/MM/DD HH:mm:ss')\n      it.registerTimeText = moment(it.registerTime).format('YYYY/MM/DD HH:mm:ss')\n      p[it.name] = it\n    })\n    this.players = Object.values(p)\n    this.banList = data.ban.map(it => ({\n      name: it.name,\n      reason: it.reason,\n      from: moment(it.from).format('LLLL'),\n      to: it.to && moment(it.to).format('LLLL'),\n      source: it.source\n    }))\n    console.log(this.banList)\n  }\n}\n","import './List.css'\nimport React, { useEffect } from 'react'\nimport ListModel, { PlayerInfo } from '../states/List'\nimport { useModel } from '../state'\nimport { Row, Col, Card, List, Avatar, Popover, Button, Tag, Table } from 'antd'\n\nconst columns = [\n  {\n    title: '游戏名',\n    dataIndex: 'name',\n    render: (it: string, p: PlayerInfo) => (\n      <>\n        <Avatar\n          shape='square'\n          size='large'\n          src={`https://minotar.net/helm/${it}/40.png`}\n        />&nbsp;&nbsp;{it} {p.op && <Tag color='geekblue'>管理员</Tag>}{p.banned && <Tag color='red'>已被封禁</Tag>}\n      </>\n    )\n  },\n  {\n    title: '最后登录',\n    dataIndex: 'loginTimeText',\n    sorter: (a: PlayerInfo, b: PlayerInfo) => a.loginTime - b.loginTime\n  },\n  {\n    title: '注册时间',\n    dataIndex: 'registerTimeText',\n    sorter: (a: PlayerInfo, b: PlayerInfo) => a.registerTime - b.registerTime\n  }\n]\n\nconst ListPage: React.FC = () => {\n  const store = useModel(ListModel)\n  useEffect(store.getList, [])\n  return (\n    <Row id='list' className='mcp-content' gutter={16}>\n      <Col span={24} sm={12}>\n        <Card title='封禁列表' className='card'>\n          <List\n            itemLayout='horizontal'\n            dataSource={store.banList}\n            renderItem={it => (\n              <List.Item>\n                <List.Item.Meta\n                  avatar={\n                    <Avatar\n                      shape='square'\n                      size='large'\n                      src={`https://minotar.net/helm/${it.name}/40.png`}\n                    />\n                  }\n                  title={<>{it.name} {!it.to && <Tag color='red'>永久封禁</Tag>}</>}\n                  description={(\n                    <>{it.reason}<Popover content={(<>\n                      <p>封禁者: {it.source}</p>\n                      <p>封禁时间: {it.from}</p>\n                      <p>解除时间: {it.to || '无'}</p>\n                    </>)}>\n                    <Button type='link'>查看更多</Button></Popover></>)}\n                />\n              </List.Item>\n            )}\n          />\n        </Card>\n      </Col>\n      <Col span={24} sm={12}>\n      <Card title='玩家列表' className='card players'>\n        <Table\n          rowKey='name'\n          columns={columns}\n          dataSource={store.players}\n          scroll={{ x: 'max-content' }}\n          pagination={false}\n        />\n      </Card>\n      </Col>\n    </Row>\n  )\n}\n\nexport default ListPage\n","import React from 'react'\nimport useReactRouter from 'use-react-router'\nimport { Menu, Icon } from 'antd'\nimport { Switch, Link, Redirect, HashRouter } from 'react-router-dom'\n\nimport Home from './routes/Home'\nimport Maps from './routes/Maps'\nimport List from './routes/List'\nimport About from './routes/About'\n\nconst routes = [\n  {\n    path: 'home',\n    icon: 'home',\n    name: '主页',\n    component: Home\n  },\n  {\n    path: 'maps',\n    icon: 'compass',\n    name: '地图',\n    component: Maps\n  },\n  {\n    path: 'list',\n    icon: 'unordered-list',\n    name: '封禁与白名单',\n    component: List\n  },\n  {\n    path: 'about',\n    icon: 'question',\n    name: '萌新必看',\n    component: About\n  }\n]\n\nconst routeMapped = routes.map(args => <HashRouter key={args.path} {...args} />)\nconst Routes: React.FC = () => (\n  <Switch>\n    {routeMapped}\n    <Redirect to='home' />\n  </Switch>\n)\n\nconst routeMenus = routes.map(({ path, icon, name }) => (\n  <Menu.Item key={path}>\n    <Link to={path}>\n      <Icon type={icon} />\n      <span>{name}</span>\n    </Link>\n  </Menu.Item>\n))\n\nconst Menus: React.FC<{ theme?: undefined | 'dark' }> = ({ theme }) => {\n  const { location: { pathname } } = useReactRouter()\n  return <Menu theme={theme} mode='inline' selectedKeys={[pathname]}>{routeMenus}</Menu>\n}\n\nexport { Menus, Routes }\n","import './Maps.css'\nimport React, { useState, useEffect } from 'react'\nimport { Spin, Card } from 'antd'\nimport Markdown from 'react-markdown'\n\nconst About: React.FC = () => {\n  const [loading, setLoading] = useState(true)\n  const [data, setData] = useState('')\n  useEffect(() => void fetch('about.md')\n    .then(it => it.text())\n    .then(setData)\n    .catch(console.error)\n    .then(() => setLoading(false)), []\n  )\n  return (\n    <div id='maps' style={{ overflowY: 'auto', padding: 16, height: loading ? '100%' : 'auto' }}>\n      <Spin spinning={loading} size='large'>\n        <Card hoverable><Markdown source={data} /></Card>\n      </Spin>\n    </div>\n  )\n}\n\nexport default About\n","import React, { useState } from 'react'\nimport useForm from 'rc-form-hooks'\nimport LoginModel from '../states/Login'\nimport HomeModel from '../states/Home'\nimport { useModel } from '../state'\nimport { Avatar, Menu, Modal, Steps, Icon, Form, Input,\n  Button, Spin, Result, Tooltip, Row, Col, Select, Dropdown } from 'antd'\n\nconst { Step } = Steps\nconst { Item } = Form\n\n/* eslint-disable jsx-a11y/anchor-is-valid */\n\nconst Login: React.FC = () => {\n  const [visible, setVisible] = useState(false)\n  const store = useModel(LoginModel)\n  const { players } = useModel(HomeModel)\n  const { getFieldDecorator, validateFields } = useForm<{\n    userName: string\n    name: string\n  }>()\n  const closeModel = () => setVisible(false)\n\n  return (\n    <>\n      {store.token\n        ? (<Dropdown overlay={(<Menu>\n              <Menu.Item key='0' disabled>用户名: {store.name}</Menu.Item>\n              <Menu.Item key='2' disabled>{store.banned ? '已被封禁' : '状态正常'}</Menu.Item>\n              <Menu.Divider />\n              <Menu.Item key='1'>\n                <a onClick={store.quit}>退出登录</a>\n              </Menu.Item>\n            </Menu>)} placement='bottomRight'>\n            <Avatar\n              className='head'\n              shape='square'\n              size='large'\n              src={`https://minotar.net/helm/${store.name}/40.png`}\n            />\n          </Dropdown>)\n        : (<Tooltip placement='bottomLeft' title='点击这里以登录' defaultVisible>\n          <Avatar\n            {...({ onClick: () => {\n              store.setStep(0)\n              setVisible(true)\n            } } as any)}\n            className='head'\n            shape='square'\n            size='large'\n            icon='user'\n          />\n        </Tooltip>)\n      }\n      <Modal\n        title='登录'\n        visible={visible}\n        onCancel={closeModel}\n        footer={null}\n        bodyStyle={{ textAlign: 'center' }}\n      >\n        <Steps current={store.step} style={{ textAlign: 'left', marginBottom: 20 }}>\n          <Step title='输入信息' icon={<Icon type='user' />} />\n          <Step title='验证' icon={<Icon type='solution' />} />\n          <Step title='完成' icon={<Icon type='smile-o' />} />\n        </Steps>\n        {store.step === 0\n          ? (<Form\n              onSubmit={e => {\n                e.preventDefault()\n                store.login(validateFields)\n              }}\n            >\n              <Row gutter={12}>\n                <Col span={24} md={10}>\n                  <Item hasFeedback>\n                    {getFieldDecorator('userName', {\n                      rules: [\n                        { required: true, message: '请选择你的游戏名!' }\n                      ]\n                    })(<Select\n                        disabled={store.loginLoading}\n                        placeholder='请选择你的游戏名'\n                      >\n                      {players.map(it => <Select.Option key={it.name} value={it.name}>{it.name}</Select.Option>)}\n                    </Select>\n                    )}\n                  </Item>\n                </Col>\n                <Col span={24} md={10}>\n                  <Item hasFeedback>\n                    {getFieldDecorator('name', {\n                      rules: [\n                        { required: true, message: '请输入当前设备标识!' },\n                        { min: 2, message: '设备标识不能少于2位!' },\n                        { max: 16, message: '设备标识不能大于16位!' }\n                      ]\n                    })(<Input\n                      disabled={store.loginLoading}\n                      prefix={<Icon type='flag' style={{ color: 'rgba(0,0,0,.25)' }} />}\n                      placeholder='设备标识'\n                    />)}\n                  </Item>\n                </Col>\n                <Col span={24} md={2}>\n                  <Item>\n                    <Button type='primary' htmlType='submit' loading={store.loginLoading}>登录</Button>\n                  </Item>\n                </Col>\n                <Col span={24}>\n                  <Item extra='请登入MC服务器再进行操作.' />\n                </Col>\n              </Row>\n            </Form>)\n          : store.step === 1 ? <Spin tip='请您进入NekoCraft服务器, 根据游戏中的提示完成验证' /> : <Result\n              status='success'\n              title='成功登录!'\n              extra={[<Button type='primary' key='0' onClick={closeModel}>返回</Button>]}\n            />\n          }\n      </Modal>\n    </>\n  )\n}\n\nexport default Login\n","import { message } from 'antd'\nimport { getProvider } from '../state'\nimport Home from './Home'\nimport Chat from './Chat'\nimport Login from './Login'\nimport List from './List'\n\nconst socket: { s: WebSocket } = { s: null }\nconst Provider = getProvider(new Home(), new Chat(socket), new Login(socket), new List(socket))\n\nconst homeModel = Provider.getModel(Home)\nconst chatModel = Provider.getModel(Chat)\nconst loginModel = Provider.getModel(Login)\nconst listModel = Provider.getModel(List)\n\nconst mapping = {\n  status: homeModel.setStatus,\n  chat: chatModel.receive,\n  login: loginModel.loginReceive,\n  token: loginModel.tokenReceive,\n  playerJoin: chatModel.playerJoin,\n  playerQuit: chatModel.playerQuit,\n  list: listModel.listReceive,\n  quit: loginModel.quitReceive,\n  dialog: (d: any) => message[d.kind](d.message, 5)\n}\n\nconst f = () => {\n  const close = message.loading('连接服务器中...')\n  socket.s = new WebSocket(process.env.NODE_ENV === 'production'\n    ? 'ws://play.nekocraft.net:8124/ws'\n    : 'ws://127.0.0.1:8080/ws'\n  )\n  socket.s.onmessage = ({ data }) => {\n    if (!data) return\n    const d = JSON.parse(data)\n    if (d.type) {\n      if (d.type in mapping) mapping[d.type](d)\n      else console.error(d.type, '没有对应的操作!')\n    }\n  }\n\n  socket.s.onopen = () => {\n    close()\n    const token = localStorage.getItem('token')\n    if (token) loginModel.checkToken(token)\n  }\n\n  socket.s.onclose = () => {\n    message.error('连接已断开!')\n    setTimeout(f, 5000)\n  }\n}\nf()\n\nexport default Provider\n","import './App.css'\nimport React, { useState } from 'react'\nimport { BrowserRouter as Router } from 'react-router-dom'\nimport { Typography, Layout, Icon, Drawer, BackTop } from 'antd'\nimport { Menus, Routes } from './Routes'\nimport Login from './components/Login'\nimport Chat from './components/Chat'\nimport Provider from './states/index'\n\nconst { Header, Sider, Content } = Layout\n\nconst App: React.FC = () => {\n  const [collapsed, updateCollapsed] = useState(window.innerWidth < 992)\n  const toggle = () => updateCollapsed(!collapsed)\n  const [drawer, updateDrawer] = useState(false)\n\n  return (\n    <Provider>\n      <Router>\n        <Layout id='mcp-app'>\n          <Sider\n            style={{ display: drawer ? 'none' : '' }}\n            trigger={null}\n            collapsible\n            breakpoint='lg'\n            onBreakpoint={updateDrawer}\n            collapsedWidth='0'\n            collapsed={collapsed}\n          >\n            <div id='mcp-logo' />\n            <Menus theme='dark' />\n          </Sider>\n          <Drawer\n            title={<div id='mcp-logo' />}\n            className='no-padding'\n            placement='left'\n            closable={false}\n            onClose={() => updateCollapsed(true)}\n            visible={drawer && !collapsed}\n          >\n            <Menus />\n          </Drawer>\n          <Layout>\n            <Header style={{\n              background: '#fff',\n              padding: 0,\n              position: 'fixed',\n              width: '100%',\n              zIndex: 1\n            }} >\n              <Icon\n                className='trigger'\n                type={collapsed ? 'menu-unfold' : 'menu-fold'}\n                onClick={toggle}\n              />\n              <Typography.Title level={3}>NekoCraft</Typography.Title>\n            </Header>\n            <Chat />\n            <Login />\n            <Content\n              style={{\n                minHeight: 280,\n                marginTop: 64\n              }}\n            >\n              <BackTop />\n              <Routes />\n            </Content>\n          </Layout>\n        </Layout>\n      </Router>\n    </Provider>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\ninterface Config {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register (config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    )\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import 'moment/locale/zh-cn'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport zhCN from 'antd/es/locale/zh_CN'\nimport * as moment from 'moment'\nimport * as serviceWorker from './serviceWorker'\nimport { ConfigProvider } from 'antd'\n\nconst dom = document.getElementById('root')\nif (!('WebSocket' in window) || !('Proxy' in window) || !('fetch' in window)) {\n  dom.innerHTML = '您的设备不支持显示本页面, 请更新至最新版的 Chrome 以获得最佳体验!'\n} else {\n  moment.locale('zh')\n\n  ReactDOM.render(<ConfigProvider locale={zhCN}><App /></ConfigProvider>, dom)\n\n  serviceWorker.register()\n}\n","import LoginModel from './Login'\nimport { Model } from '../state'\n\ninterface Message {\n  name: string\n  message?: string\n  time: number\n  type?: number\n  right?: boolean\n}\n\nlet dom: HTMLDivElement\n\nexport const setDom = (d: HTMLDivElement) => (dom = d)\n\nconst scroll = () => {\n  if (dom && dom.scrollTop === dom.scrollHeight - dom.clientHeight) {\n    process.nextTick(() => (dom.scrollTop = dom.scrollHeight))\n  }\n}\n\nexport default class Chat extends Model {\n  public messages: Message[] = []\n  public hasNew = false\n  public value = ''\n\n  constructor (private socket = { s: new WebSocket('') }) { super() }\n\n  public setValue (e: any) {\n    this.value = e.target.value\n  }\n\n  public receive (json: { name: string, message: string }) {\n    scroll()\n    this.messages.push({\n      name: json.name,\n      message: json.message,\n      time: Date.now(),\n      right: this.getModel(LoginModel).name === json.name\n    })\n    this.hasNew = true\n  }\n\n  public clearState () {\n    this.hasNew = false\n  }\n\n  public playerJoin (data: { name: string }) {\n    scroll()\n    this.messages.push({ name: data.name, type: 1, time: Date.now() })\n  }\n\n  public playerQuit (data: { name: string }) {\n    this.messages.push({ name: data.name, type: 2, time: Date.now() })\n  }\n\n  public chat () {\n    this.socket.s.send('chat|' + JSON.stringify({ message: this.value }))\n    this.value = ''\n  }\n}\n"],"sourceRoot":""}